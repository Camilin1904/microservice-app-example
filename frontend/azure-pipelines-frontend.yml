trigger:
  branches:
      include:
        - master
  paths:
    include:
      - frontend/**

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'frontend'
  acrLoginServer: 'mytodosacr.azurecr.io'
  dockerRegistryServiceConnection: 'acr-connection' # Docker Registry SC name
  azureWebAppName: 'TODO-frontend'                 # Azure Web App name
  azureSubscription: 'PipelineConnection'        # ARM SC name
  AUTH_API_ADDRESS: https://todo-auth-api-h7c6cjghc6ena3da.eastus-01.azurewebsites.net
  TODOS_API_ADDRESS: https://todos-api-a9apeufvaggbfjda.eastus-01.azurewebsites.net
  ZIPKIN_URL: https://todo-zipkin-gqbcbmezgcbddwat.eastus-01.azurewebsites.net

stages:
  - stage: BuildAndPush
    displayName: Build and Push Docker Image
    jobs:
      - job: Docker
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
            fetchDepth: 0

          - script: git checkout master
            displayName: Switch to master branch  

          - task: Docker@2
            displayName: Build and push image to ACR
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageName)
              command: buildAndPush
              Dockerfile: frontend/Dockerfile
              buildContext: frontend
              arguments: |
                --build-arg AUTH_API_ADDRESS=$(AUTH_API_ADDRESS)
                --build-arg TODOS_API_ADDRESS=$(TODOS_API_ADDRESS)
                --build-arg ZIPKIN_URL=$(ZIPKIN_URL)
              tags: |
                $(Build.BuildId)
              
  - stage: Deploy
    displayName: Deploy to Azure Web App
    dependsOn: BuildAndPush
    jobs:
      - job: DeployWebApp
        steps:
          - task: AzureWebAppContainer@1
            displayName: Deploy image to Azure Web App
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(azureWebAppName)
              containers: |
                $(acrLoginServer)/$(imageName):$(Build.BuildId)
